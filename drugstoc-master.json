{
    "Description": "Launch nested CloudFormation stack to provision and run AWS CodeDeploy",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "DatabaseAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },

        "DatabaseInstanceClass": {
            "Description": "The database instance type",
            "Type": "String",
            "Default": "db.t2.small",
            "AllowedValues": ["db.t1.micro", "db.m1.small", "db.m1.medium", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge", "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", "db.cr1.8xlarge", "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large"],
            "ConstraintDescription": "must select a valid database instance type."
        }

        "EC2KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },

        "EC2InstanceType": {
            "Description": "Instance Type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
		"EC2TagKey": {
            "Description": "The tag key that identifies this as a target for deployments.",
            "Type": "String",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "EC2TagValue": {
            "Description": "The tag value that identifies this as a target for deployments.",
            "Type": "String",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "Can contain only ASCII characters."
        }
    },
    "Resources": {
        "DBStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "http: //s3.amazonaws.com/cloudpractice-development/drugstoc/drugstoc-db.json",
                "TimeoutInMinutes": "60",
                "Parameters": {
                    "DBAllocatedStorage": {
                        "Ref": "DatabaseAllocatedStorage"
                    },
                    "DBInstanceClass": {
                        "Ref": "DatabaseInstanceClass"
                    }
                }
            }
        },
        "EC2InstancesStack": {
            "Type": "AWS::CloudFormation::Stack",
			"DependsOn": "DBStack",
            "Properties": {
                "TemplateURL": "http://s3.amazonaws.com/cloudpractice-development/drugstoc/ec2_with_codedeploy_agent_ubuntu.json",
                "TimeoutInMinutes": "60",
                "Parameters": {
                    "KeyName": {
                        "Ref": "EC2KeyName"
                    },
                    "TagKey": {
                        "Ref": "EC2TagKey"
                    },
                    "TagValue": {
                        "Ref": "EC2TagValue"
                    },
                    "InstanceType": {
                        "Ref": "EC2InstanceType"
                    },
                    "DBHOST": {
                        "Fn::GetAtt": [
                            "DBStack",
                            "Outputs.DBHost"
                        ]
                    },
                    "DBPORT": {
                        "Fn::GetAtt": [
                            "DBStack",
                            "Outputs.DBPort"
                        ]
                    },
                    "DBUSER": {
                        "Fn::GetAtt": [
                            "DBStack",
                            "Outputs.DBUser"
                        ]
                    },
                    "DBPASSWORD": {
                        "Fn::GetAtt": [
                            "DBStack",
                            "Outputs.DBPassword"
                        ]
                    }
                }
            }
        },
        "CodeDeployStack": {
            "Type": "AWS::CloudFormation::Stack",
            "DependsOn": "EC2InstancesStack",
            "Properties": {
                "TemplateURL": "http://s3.amazonaws.com/cloudpractice-cf-templates/drugstoc/drugstoc-codedeploy.json",
                "TimeoutInMinutes": "60",
                "Parameters": {
                    "TagValue": {
                        "Ref": "EC2TagValue"
                    },
                    "RoleArn": {
                        "Fn::GetAtt": [
                            "EC2InstancesStack",
                            "Outputs.CodeDeployTrustRoleARN"
                        ]
                    },
                    "Bucket": {
                        "Ref": "S3Bucket"
                    },
                    "Key": {
                        "Ref": "S3Key"
                    }
                }
            }
        }
    },
    "Outputs": {
        "ServerIP": {
            "Value": {
				"Fn::GetAtt": [
					"EC2InstancesStack",
					"Outputs.PublicIP"
				]
        }
    }
}
