{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Installing Cloudformation helper scripts in Ubuntu 16.04 LTS",

    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },

        "InstanceType": {
            "Description": "Instance Type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },

        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "TagKey": {
            "Description": "The EC2 tag key that identifies this as a target for deployments.",
            "Type": "String",
            "Default": "Name",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "TagValue": {
            "Description": "The EC2 tag value that identifies this as a target for deployments.",
            "Type": "String",
            "Default": "CodeDeployDemo",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "Can contain only ASCII characters."
        },

        "DBHOST": {
            "Description": "Postgres DB Host",
            "Type": "String"
        },

        "DBPORT": {
            "Description": "Postgres DB Port",
            "Type": "String"
        },

        "DBUSER": {
            "Default": "odoo",
            "Description": "Username for Postgres database.",
            "Type": "String"
        },

        "DBPASSWORD": {
            "NoEcho": "true",
            "Description": "Password for Postgres database.",
            "Type": "String"
        },

    },

    "Mappings": {
        "AWSRegionAMIEC2": {
            "us-east-1": {
                "Ubuntu16": "ami-d15a75c7"
            },
            "us-west-2": {
                "Ubuntu16": "ami-746aba14"
            },
            "us-west-1": {
                "Ubuntu16": "ami-a9a8e4c9"
            },
            "eu-west-1": {
                "Ubuntu16": "ami-844e0bf7"
            },
            "eu-central-1": {
                "Ubuntu16": "ami-a9a557c6"
            },
            "ap-northeast-1": {
                "Ubuntu16": "ami-d82efcb9"
            },
            "ap-southeast-1": {
                "Ubuntu16": "ami-d554f1b6"
            },
            "ap-southeast-2": {
                "Ubuntu16": "ami-0bc1f168"
            }
        }
    },

    "Resources": {
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "full_install": ["install_and_enable_cfn_hup", "install_and_enable_odoo"]
                    },
                    "install_and_enable_cfn_hup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                            "[main]\n",
                                            "stack=", {
                                                "Ref": "AWS::StackId"
                                            }, "\n",
                                            "region=", {
                                                "Ref": "AWS::Region"
                                            }, "\n"
                                        ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource EC2Instance ",
                                            "         --configsets full_install ",
                                            "         --region ", {
                                                "Ref": "AWS::Region"
                                            }, "\n",
                                            "runas=root\n"
                                        ]]
                                }
                            },
                            "/lib/systemd/system/cfn-hup.service": {
                                "content": {
                                    "Fn::Join": ["", [
                                            "[Unit]\n",
                                            "Description=cfn-hup daemon\n\n",
                                            "[Service]\n",
                                            "Type=simple\n",
                                            "ExecStart=/opt/aws/bin/cfn-hup\n",
                                            "Restart=always\n\n",
                                            "[Install]\n",
                                            "WantedBy=multi-user.target"]]
                                }
                            }
                        },
                        "commands": {
                            "01_enable_cfn_hup": {
                                "command": "systemctl enable cfn-hup.service"
                            },
                            "02_start_cfn_hup": {
                                "command": "systemctl start cfn-hup.service"
                            }
                        }
                    }
                    "install_and_enable_odoo": {
                        "packages": {
                            "apt": {
                                "nginx": []
                            }
                        },
                        "commands": {
                            "1_download_install_script": {
                                "command": "wget 'https://raw.githubusercontent.com/kehindesamson/InstallScript/13.0/odoo_install.sh'",
                            },
                            "2_install_odoo": {
                                "command": "chmod -x odoo_install.sh && sh odoo_install.sh",
                                "env": {
                                    "OE_USER": "odoo"
                                },
                                "env": {
                                    "OE_HOME": "/odoo"
                                },
                                "env": {
                                    "OE_HOME_EXT": "/odoo/odoo-server"
                                },
                                "env": {
                                    "OE_PORT": "8069"
                                },
                                "env": {
                                    "OE_VERSION": "11.0"
                                },
                                "env": {
                                    "IS_ENTERPRISE": False
                                },
                                "env": {
                                    "OE_SUPERADMIN": "admin"
                                },
                                "env": {
                                    "OE_CONFIG": "odoo"
                                },
                                "env": {
                                    "INSTALL_WKHTMLTOPDF": True
                                },
                                "env": {
                                    "DB_HOST": {
                                        "Ref": "DBHOST"
                                    }
                                },
                                "env": {
                                    "DB_PORT": {
                                        "Ref": "DBPORT"
                                    }
                                },
                                "env": {
                                    "DB_USER": {
                                        "Ref": "DBUSER"
                                    }
                                },
                                "env": {
                                    "DB_PASSWORD": {
                                        "Ref": "DBPASSWORD"
                                    }
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "odoo": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": ["/etc/odoo.conf"]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [{
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionAMIEC2", {
                            "Ref": "AWS::Region"
                        }, "Ubuntu16"]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                                "#!/bin/bash -xe\n",
                                "apt-get update -y\n",
                                "apt-get install -y python-setuptools ruby wget\n",
                                "# CF-Signal Helper function.\n",
                                "function error_exit\n",
                                "{\n",
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", {
                                    "Ref": "WaitHandle"
                                },
                                "'\n",
                                "  exit 1\n",
                                "}\n",
                                "### Install the files and packages from the metadata\n",
                                "mkdir -p /opt/aws/bin\n",
                                "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ", {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource EC2Instance ",
                                "         --configsets full_install ",
                                "         --region ", {
                                    "Ref": "AWS::Region"
                                },
                                " || error_exit 'Failed to run cfn-init.'\n",
                                "### Install the AWS CodeDeploy Agent. ###\n",
                                "cd /home/ubuntu\n",
                                "wget 'https://aws-codedeploy-eu-west-1.s3.eu-west-1.amazonaws.com/latest/install' || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                                "chmod +x ./install\n",
                                "./install auto || error_exit 'Failed to install AWS CodeDeploy Agent.'\n",
                                "systemctl enable codedeploy-agent && service codedeploy-agent start\n",
                                "### Install Cloudwatch Log Agent ###\n",
                                "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                                "wget https://s3.amazonaws.com/aws-codedeploy-us-east-1/cloudwatch/codedeploy_logs.conf\n",
                                "chmod +x ./awslogs-agent-setup.py\n",
                                "python awslogs-agent-setup.py -n -r ", {
                                    "Ref": "AWS::Region"
                                },
                                " -c s3://aws-codedeploy-eu-west-1/cloudwatch/awslogs.conf\n",
                                "mkdir -p /var/awslogs/etc/config\n",
                                "cp codedeploy_logs.conf /var/awslogs/etc/config/\n",
                                "systemctl enable awslogs && service awslogs restart\n",
                                "### All is well, so signal success.\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '", {
                                    "Ref": "WaitHandle"
                                },
                                "'\n"
                            ]]
                    }
                },
                "Tags": [{
                        "Key": {
                            "Ref": "TagKey"
                        },
                        "Value": {
                            "Ref": "TagValue"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "InstanceRoleInstanceProfile"
                }
            }
        },
        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "InstanceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22",
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "8069",
                        "ToPort": "8069",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Count": 1,
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": "300"
            }
        },
        "CodeDeployTrustRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codedeploy.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/"
            }
        }
    },
    "Outputs": {
        "CodeDeployTrustRoleARN": {
            "Value": {
                "Fn::GetAtt": [
                    "CodeDeployTrustRole",
                    "Arn"
                ]
            }
        },
		"PublicIP" : {
		  "Description" : "Public IP address of the newly created EC2 instance",
		  "Value" : { "Fn::GetAtt" : [ "Ec2Instance", "PublicIp" ] }
		}
    }
}
